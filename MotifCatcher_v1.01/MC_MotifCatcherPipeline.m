function MC_MotifCatcherPipeline(TaskNumber)
%This function performs the entire 'MotifCatcher' analysis on an input
%dataset. Motifs in the dataset that would otherwise be missed are 'caught'
%here, and displayed along with many relevant statistics and graphical
%display tools.
%
%The output structure 'DataSetProfile' gives all relevant output
%information in matlab form.
%
%A directory is created on the user's computer storing the results of the
%analysis.
%
%Inputs:
%   TaskNumber:
%       describe which routine to follow.
%           1: Whole pipeline
%           2: Create set of related subsets
%           3: build a motif tree
%           4: Load Motif Tree, and open interface for cluster creation
%
%
%   This function handles several options from the MotifCatcher
%   welcome window.
%
%Outputs:
%   DataSetProfile
%       all MATLAB outputs are saved to a single structure. see explanation
%       below.
%
%Algorithm:
%
%   Each step is completed by a combination of loading data generated in
%   other steps, supplementing required additional information, and
%   performing the step itself.
%
%   The 'whole pipeline' step is unique in that it does not call upon
%   anything generated by other steps, but creates everything entirely from
%   scratch.
%
%   As folders are created, a version of 'DataSetProfile.mat' is saved in
%   each.
%
%   The DataSetProfile.mat structure increases in complexity moving through
%   the pipeline
%
%   The user must always enter a desired name for the next ouput folder, as
%   well as the folder contaiing the most advanced version of
%   'DataSetProfile.mat', in addition to all other relevant outputs
%
%   ---Pipeline---:
%
%   [Input sequence dataset and create root directory]
%                   |
%                   V
%   [Create End State Seqs and MEME directories]
%               DataSetProfile Structure:
%                   .Directories:
%                       .Root
%                       .RMEME
%                       .RSeqs
%                   .SeqFile
%                   .MEME_parameters
%                       .MinWidth
%                       .MaxWidth
%                       .Alphabet
%                       .RevComp
%                       .ForcePal
%                       .MastThreshold
%                   .R_parameters
%                       .Seeds
%                       .SeedSize
%                   .ProgramLocations
%                       .MEME
%                       .MAST
%                       .FastaGetMarkov
%                   |
%                   V
%   [Compute STAMP output and build Motif Tree]
%
%       +Stamp Output directory, MotifTree_parameters, ProgramLocations
%
%               Added DataSetProfile Fields:
%
%                   .Directories
%                       .StampOutput
%                   .MotifTree_parameters
%                       .EvalThreshold
%                       .MaxR
%                       .AlignmentScheme
%                       .GapOpen
%                       .GapExtension
%                       .ColComparison
%                   .Tree
%                   .ProgramLocations
%                       .STAMP
%                       .STAMPscores
%                       .STAMPDatabase
%
%               DataSetProfile Structure:
%                   .Directories:
%                       .Root
%                       .RMEME
%                       .RSeqs
%                       .StampOutput
%                   .SeqFile
%                   .MEME_parameters
%                       .MinWidth
%                       .MaxWidth
%                       .Alphabet
%                       .RevComp
%                       .ForcePal
%                       .MastThreshold
%                   .MotifTree_parameters
%                       .EvalThreshold
%                       .MaxR
%                       .AlignmentScheme
%                       .GapOpen
%                       .GapExtension
%                       .ColComparison
%                   .Tree
%                   .ProgramLocations
%                       .MEME
%                       .MAST
%                       .FastaGetMarkov
%                       .STAMP
%                       .STAMPscores
%                       .STAMPDatabase
%                   |
%                   V
%   [Evaluate Clusters, determine Families, compute CESP]
%       <GUI for this step>
%
%       User may 'export clusters' without making CESPs, in that case, a
%       new structure is saved in the Stamp Output (Motif Tree) directory.
%
%       + Clustering Threshold, CESP Output directory
%
%              Added DataSetProfile Fields:
%                   .Directories:
%                       .FP
%                   .ClusteringThreshold
%                   .Families
%                   .AllMotifsAndLocations
%                   
%               DataSetProfile Structure:
%
%                   .Directories:
%                       .Root
%                       .RMEME
%                       .RSeqs
%                       .StampOutput
%                       .CESP
%                   .SeqFile
%                   .MEME_parameters
%                       .MinWidth
%                       .MaxWidth
%                       .Alphabet
%                       .RevComp
%                       .ForcePal
%                       .MastThreshold
%                   .MotifTree_parameters
%                       .EvalThreshold
%                       .MaxR
%                       .AlignmentScheme
%                       .GapOpen
%                       .GapExtension
%                       .ColComparison
%                   .ClusteringThreshold
%                   .Families
%                   .AllMotifsAndLocations
%                   .Tree
%                   .Families
%                   .AllMotifsAndLocations
%                   |
%                   V
%   [Evaluate Co-Occurrences and Co-Localizations among motifs]
%
%       +Evaluate = true
%           *This step does not entail making a new directory - rather,
%           append the 'DataSetProfile.mat' structure in CESP-folder with
%           .MotifMap field.
%
%              Added DataSetProfile Fields:
%                   .Directories:
%                       .FP
%                   .ClusteringThreshold
%                   .Families
%                   .AllMotifsAndLocations
%
%               DataSetProfile Structure:
%                   .Directories:
%                       .Root
%                       .RMEME
%                       .RSeqs
%                       .StampOutput
%                       .CESP
%                   .SeqFile
%                   .MEME_parameters
%                   .Clustering_parameters
%                   .Tree
%                   .Families
%                   .AllMotifsAndLocations
%                   .MotifMap
%                   |
%                   V
%     [X End X]
%
%
%   input_source_var = 0: The user has not provided all information initially
%   input_source_var = 1: The user has provided all information initially

%% Whole pathway, all in one go
if TaskNumber == 1

% ---- Gather inputs ---------------------------------------------------- %
[SeqFile Directories MEME_parameters R_parameters MotifTree_parameters Clustering_parameters ProgramLocations]...
    = MC_GetInput_WholePathway;

% ---- directory creation ----------------------------------------------- %
system(['mkdir ',Directories.root]);
system(['mkdir ',Directories.RSeqs]);
system(['mkdir ',Directories.RMEME]);
system(['mkdir ',Directories.MotifTree]);
system(['mkdir ',Directories.FP]);

% ---- perform all actions ---------------------------------------------- %
disp('Entering related subset generation step.');

%reset stream before computing a large number of random trials.
S = RandStream('mt19937ar','Seed',sum(100*clock));
RandStream.setDefaultStream(S);

%generate R according to user specifications
[~, MEME_parameters]=...
    MC_MakeR(SeqFile,Directories,R_parameters,MEME_parameters,ProgramLocations);

disp('Entering motif tree, clustering, and FP generation steps.');

%build tree, clusters, CESPs, etc
[DirectoryList Tree Families AllMotifsAndLocations] = ...
    MC_ClusterR(MotifTree_parameters,Directories,MEME_parameters,...
    ProgramLocations,SeqFile,Clustering_parameters);

%make motif map
disp('Entering MotifMap creation step');
MotifMap = MC_MakeMotifMap(Directories,SeqFile,MEME_parameters.RevComp);

%evaluate for co-localizations and occurrences
if strmatch(Clustering_parameters.EvaluateMotifMap,'y')
    disp('Evaluating CoOccurrences and CoLocalizations');
    
[CoOccurrences CoLocalizations CoVals] = ...
    MC_CompareOccurrenceAndLocalization(MotifMap);
end

disp('All Steps completed, saving output to DataSetProfile structures');
% ---- save data structures --------------------------------------------- %
DataSetProfile = struct();

DataSetProfile.SeqFile = SeqFile;
DataSetProfile.Directories.root = Directories.root;
DataSetProfile.Directories.RMEME = Directories.RMEME;
DataSetProfile.Directories.RSeqs = Directories.RSeqs;
DataSetProfile.MEME_parameters = MEME_parameters;
DataSetProfile.R_parameters = R_parameters;
DataSetProfile.ProgramLocations.MEME = ProgramLocations.MEME;
DataSetProfile.ProgramLocations.FastaGetMarkov = ProgramLocations.FastaGetMarkov;
DataSetProfile.ProgramLocations.MAST = ProgramLocations.MAST;

filename = strcat(Directories.RMEME,'/DataSetProfile.mat');
save(filename,'DataSetProfile');

%update
DataSetProfile.Directories.MotifTree = Directories.MotifTree;
DataSetProfile.MotifTree_parameters = MotifTree_parameters;
DataSetProfile.ProgramLocations.STAMP = ProgramLocations.STAMP;
DataSetProfile.ProgramLocations.STAMPScores = ...
    ProgramLocations.STAMPScores;
DataSetProfile.ProgramLocations.STAMPDatabase = ...
    ProgramLocations.STAMPDatabase;

%add Tree and DirectoryList to output structure.
DataSetProfile.Tree = Tree;
DataSetProfile.DirectoryList = DirectoryList;

%save structure with all information into the Motif Tree directory
filename = strcat(Directories.MotifTree,'/DataSetProfile.mat');
save(filename,'DataSetProfile');

DataSetProfile.Directories.FP = Directories.FP;
DataSetProfile.Clustering_parameters = Clustering_parameters;

DataSetProfile.Families = Families;
DataSetProfile.AllMotifsAndLocations = AllMotifsAndLocations;
DataSetProfile.MotifMap = MotifMap;

if Clustering_parameters.EvaluateMotifMap == 1
    DataSetProfile.CoOccurrences = CoOccurrences;   
    DataSetProfile.CoLocalizations = CoLocalizations;
    DataSetProfile.CoVals = CoVals;
end

%save structure with all information into the FP directory
filename = strcat(Directories.FP,'/DataSetProfile.mat');
save(filename,'DataSetProfile');

Option = MC_WholePipelineViewResults;
if strmatch(Option,'Yes')
    MC_TreeWithClusters(Tree,Directories.MotifTree);
else 
    MotifCatcher;
end

end

% ----------------------------------------------------------------------- %
% ----------------------------------------------------------------------- %
% ----------------------------------------------------------------------- %

%% Select a specific part of the pathway
%initialize: the user provides all information.
input_source_var = 0;
Root = '';

if TaskNumber == 2

% ---- Gather inputs ---------------------------------------------------- %
[SeqFile Directories MEME_parameters R_parameters ProgramLocations] = ...
    MC_GetInput_MakeRelatedSubsets;

% ---- directory creation ----------------------------------------------- %
system(['mkdir ',Directories.root]);
system(['mkdir ',Directories.RSeqs]);
system(['mkdir ',Directories.RMEME]);

% ---- build library ---------------------------------------------------- %
disp('Entering related subset generation step.');

%reset stream before computing a large number of random trials.
S = RandStream('mt19937ar','Seed',sum(100*clock));
RandStream.setDefaultStream(S);

%generate R according to user specifications
[~, MEME_parameters]=...
    MC_MakeR(SeqFile,Directories,R_parameters,MEME_parameters,ProgramLocations);

% ---- save to struct() ------------------------------------------------- %
DataSetProfile = struct();

DataSetProfile.SeqFile = SeqFile;
DataSetProfile.Directories = Directories;
DataSetProfile.MEME_parameters = MEME_parameters;
DataSetProfile.R_parameters = R_parameters;
DataSetProfile.ProgramLocations = ProgramLocations;

%save structure with all information into the RMEME directory
filename = strcat(Directories.RMEME,'/DataSetProfile.mat');
save(filename,'DataSetProfile');

disp('Job successfully completed!');

%once a task is completed, ask the user if they would like to
%proceed to the next step.
%
%if they would not, pring up the main menu

Option = MC_ProceedToNextStep;
if strmatch(Option,'Yes')
    TaskNumber = TaskNumber + 1;
    input_source_var = 1;
    Root = Directories.root;
else 
    MotifCatcher;
end

end

% ----------------------------------------------------------------------- %
% ----------------------------------------------------------------------- %
% ----------------------------------------------------------------------- %

if TaskNumber == 3

% ---- Gather inputs ---------------------------------------------------- %
[Directories MotifTree_parameters ProgramLocations] = ...
    MC_GetInput_MakeMotifTree(input_source_var,Root);

if input_source_var == 1
   Directories.RMEME = DataSetProfile.Directories.RMEME;
end

% ---- directory creation ----------------------------------------------- %
system(['mkdir ',Directories.MotifTree]);

% ---- retrieve existing output, and update ----------------------------- %

%initialize
DataSetProfile = struct();

%retrieve
filename = strcat(Directories.RMEME,'/DataSetProfile.mat');
S = load(filename);

DataSetProfile.SeqFile = S.DataSetProfile.SeqFile;
DataSetProfile.Directories = S.DataSetProfile.Directories;
DataSetProfile.MEME_parameters = S.DataSetProfile.MEME_parameters;
DataSetProfile.R_parameters = S.DataSetProfile.R_parameters;
DataSetProfile.ProgramLocations = S.DataSetProfile.ProgramLocations;

%update
DataSetProfile.Directories.MotifTree = Directories.MotifTree;
DataSetProfile.MotifTree_parameters = MotifTree_parameters;
DataSetProfile.ProgramLocations.STAMP = ProgramLocations.STAMP;
DataSetProfile.ProgramLocations.STAMPScores = ...
    ProgramLocations.STAMPScores;
DataSetProfile.ProgramLocations.STAMPDatabase = ...
    ProgramLocations.STAMPDatabase;

% ---- build tree ------------------------------------------------------- %
disp('Entering Motif Tree-building step.');    

[Tree DirectoryList] = MC_MakeMotifTree(DataSetProfile);

%add Tree and DirectoryList to output structure.
DataSetProfile.Tree = Tree;
DataSetProfile.DirectoryList = DirectoryList;

%save structure with all information into the Motif Tree directory
filename = strcat(Directories.MotifTree,'/DataSetProfile.mat');
save(filename,'DataSetProfile');

disp('Job successfully completed!');

%once a task is completed, ask the user if they would like to
%proceed to the next step.
%
%if they would not, pring up the main menu

Option = MC_ProceedToNextStep;
if strmatch(Option,'Yes')
    TaskNumber = TaskNumber + 1;
    input_source_var = 1;
else 
    MotifCatcher;
end

end

% ----------------------------------------------------------------------- %
% ----------------------------------------------------------------------- %
% ----------------------------------------------------------------------- %

if TaskNumber == 4

    if input_source_var == 0
        MotifTreeDir = MC_GetMotifTreeDir;
    else
        MotifTreeDir = Directories.MotifTree;
    end

filename = strcat(MotifTreeDir,'/DataSetProfile.mat');
S = load(filename);

phytree = S.DataSetProfile.Tree;

%GUI-interaction solves the rest 
MC_TreeWithClusters(phytree,MotifTreeDir);
end

% ----------------------------------------------------------------------- %
% ----------------------------------------------------------------------- %
% ----------------------------------------------------------------------- %

if TaskNumber == 5
disp('Creating Motif Map.');  
FPdir = MC_GetFPDir;

%retrieve DataSetProfile
filename = strcat(FPdir,'/DataSetProfile.mat');
S = load(filename);

MotifMap = MC_MakeMotifMap(S.DataSetProfile.Directories,...
    S.DataSetProfile.SeqFile,S.DataSetProfile.MEME_parameters.RevComp);

%load into new structure
DataSetProfile = S.DataSetProfile;
DataSetProfile.MotifMap = MotifMap;

%remove old version and upload new version.
system(['rm ' filename]);
save(filename,'DataSetProfile');

disp('Job successfully completed!');

Option = MC_ProceedToNextStep;
if strmatch(Option,'Yes')
    TaskNumber = TaskNumber + 1;
    input_source_var = 1;
else 
    MotifCatcher;
end

end

if TaskNumber == 6
disp('Evaluating CoOccurrences and CoLocalizations');

if input_source_var == 0
    FPdir = MC_GetFPDir;
end

%retrieve DataSetProfile
filename = strcat(FPdir,'/DataSetProfile.mat');
S = load(filename);

%evaluate CoOccurrences, CoLocalizations, and CoVals
[CoOccurrences CoLocalizations CoVals] = ...
    MC_CompareOccurrenceAndLocalization(S.DataSetProfile.MotifMap);

%load into new structure
DataSetProfile = S.DataSetProfile;
DataSetProfile.CoOccurrences = CoOccurrences;
DataSetProfile.CoLocalizations = CoLocalizations;
DataSetProfile.CoVals = CoVals;

%remove old version and upload new version.
system(['rm ' filename]);
save(filename,'DataSetProfile');

disp('Job successfully completed!');

MotifCatcher
end

end
